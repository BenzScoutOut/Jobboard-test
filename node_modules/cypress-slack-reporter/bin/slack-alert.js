"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var webhook_1 = require("@slack/webhook");
var fs = require("fs");
var path = require("path");
var _a = process.env, CI_SHA1 = _a.CI_SHA1, CI_BRANCH = _a.CI_BRANCH, CI_USERNAME = _a.CI_USERNAME, CI_BUILD_URL = _a.CI_BUILD_URL, CI_BUILD_NUM = _a.CI_BUILD_NUM, CI_PULL_REQUEST = _a.CI_PULL_REQUEST, CI_PROJECT_REPONAME = _a.CI_PROJECT_REPONAME, CI_PROJECT_USERNAME = _a.CI_PROJECT_USERNAME, CI_URL = _a.CI_URL;
var SLACK_WEBHOOK_URL = process.env.SLACK_WEBHOOK_URL;
var reportDir;
var videoDir;
var screenshotDir;
function slackRunner(ciProvider, vcsRoot, reportDirectory, videoDirectory, screenshotDirectory, logger, base) {
    if (ciProvider === "circleci" || ciProvider === undefined) {
        var _a = process.env, CIRCLE_SHA1 = _a.CIRCLE_SHA1, CIRCLE_BRANCH = _a.CIRCLE_BRANCH, CIRCLE_USERNAME = _a.CIRCLE_USERNAME, CIRCLE_BUILD_URL = _a.CIRCLE_BUILD_URL, CIRCLE_BUILD_NUM = _a.CIRCLE_BUILD_NUM, CIRCLE_PULL_REQUEST = _a.CIRCLE_PULL_REQUEST, CIRCLE_PROJECT_REPONAME = _a.CIRCLE_PROJECT_REPONAME, CIRCLE_PROJECT_USERNAME = _a.CIRCLE_PROJECT_USERNAME;
        (CI_SHA1 = CIRCLE_SHA1),
            (CI_BRANCH = CIRCLE_BRANCH),
            (CI_USERNAME = CIRCLE_USERNAME),
            (CI_BUILD_URL = CIRCLE_BUILD_URL),
            (CI_BUILD_NUM = CIRCLE_BUILD_NUM),
            (CI_PULL_REQUEST = CIRCLE_PULL_REQUEST),
            (CI_PROJECT_REPONAME = CIRCLE_PROJECT_REPONAME),
            (CI_PROJECT_USERNAME = CIRCLE_PROJECT_USERNAME);
        CI_URL = "https://circleci.com/api/v1.1/project";
    }
    if (vcsRoot || vcsRoot === undefined) {
        if (vcsRoot === undefined) {
            vcsRoot = "github";
        }
        VCS_ROOT = vcsRoot;
    }
    reportDir = reportDirectory;
    screenshotDir = screenshotDirectory;
    videoDir = videoDirectory;
    try {
        sendMessage(logger);
    }
    catch (e) {
        throw new Error(e);
    }
}
exports.slackRunner = slackRunner;
var VCS_ROOT;
var COMMIT_URL;
var VCS_BASEURL;
var prLink = "";
var videoAttachmentsSlack = "";
var screenshotAttachmentsSlack = "";
var reportHTMLFilename;
var reportHTMLUrl;
var artefactUrl;
var attachments;
var totalSuites;
var totalTests;
var totalPasses;
var totalFailures;
var totalDuration;
var status;
function sendMessage(logger) {
    var sendArgs = {};
    COMMIT_URL = getCommitUrl(VCS_ROOT);
    buildHTMLReportURL(reportDir, logger);
    getVideoLinks(artefactUrl, videoDir); //
    getScreenshotLinks(artefactUrl, screenshotDir);
    prChecker(CI_PULL_REQUEST);
    var reportStatistics = getTestReportStatus(reportDir); // process the test report
    status = reportStatistics.status;
    switch (status) {
        case "error": {
            var webhookInitialArguments = webhookInitialArgs({}, status);
            var webhook = new webhook_1.IncomingWebhook(SLACK_WEBHOOK_URL, webhookInitialArguments);
            var reports = attachmentReports(attachments, status);
            var sendArguments = webhookSendArgs(sendArgs, [reports]);
            return webhook.send(sendArguments);
        }
        case "failed": {
            var webhookInitialArguments = webhookInitialArgs({}, status);
            var webhook = new webhook_1.IncomingWebhook(SLACK_WEBHOOK_URL, webhookInitialArguments);
            var reports = attachmentReports(attachments, status);
            var artefacts = attachementsVideoAndScreenshots(attachments, status);
            var sendArguments = webhookSendArgs(sendArgs, [reports, artefacts]);
            return webhook.send(sendArguments);
        }
        case "passed": {
            var webhookInitialArguments = webhookInitialArgs({}, status);
            var webhook = new webhook_1.IncomingWebhook(SLACK_WEBHOOK_URL, webhookInitialArguments);
            var reports = attachmentReports(attachments, status);
            var artefacts = attachementsVideoAndScreenshots(attachments, status);
            var sendArguments = webhookSendArgs(sendArgs, [reports, artefacts]);
            return webhook.send(sendArguments);
        }
        default: {
            throw new Error("An error occured getting the status of the test run");
        }
    }
}
exports.sendMessage = sendMessage;
function webhookInitialArgs(initialArgs, 
// tslint:disable-next-line: no-shadowed-variable
status) {
    switch (status) {
        case "passed": {
            return (initialArgs = {
                text: CI_PROJECT_REPONAME + " test run passed.\nThis run was triggered by <" + COMMIT_URL + "|" + CI_USERNAME + ">" + prLink
            });
        }
        case "failed": {
            return (initialArgs = {
                text: CI_PROJECT_REPONAME + " test run failed.\nThis run was triggered by <" + COMMIT_URL + "|" + CI_USERNAME + ">" + prLink
            });
        }
        case "error": {
            return (initialArgs = {
                text: CI_PROJECT_REPONAME + " test build failed.\nThis run was triggered by <" + COMMIT_URL + "|" + CI_USERNAME + ">" + prLink
            });
        }
        default: {
            break;
        }
    }
    return initialArgs;
}
exports.webhookInitialArgs = webhookInitialArgs;
function webhookSendArgs(argsWebhookSend, messageAttachments) {
    argsWebhookSend = {
        attachments: messageAttachments,
        unfurl_links: false,
        unfurl_media: false
    };
    return argsWebhookSend;
}
exports.webhookSendArgs = webhookSendArgs;
function attachmentReports(attachmentsReports, 
// tslint:disable-next-line: no-shadowed-variable
status) {
    switch (status) {
        case "passed": {
            return (attachments = {
                color: "#36a64f",
                fallback: "Report available at " + reportHTMLUrl,
                text: "Branch: " + CI_BRANCH + "\nTotal Passed:  " + totalPasses,
                actions: [
                    {
                        type: "button",
                        text: "Test Report",
                        url: "" + reportHTMLUrl,
                        style: "primary"
                    },
                    {
                        type: "button",
                        text: "CircleCI Logs",
                        url: "" + CI_BUILD_URL,
                        style: "primary"
                    }
                ]
            });
        }
        case "failed": {
            return (attachments = {
                color: "#ff0000",
                fallback: "Report available at " + reportHTMLUrl,
                title: "Total Failed: " + totalFailures,
                text: "Branch: " + CI_BRANCH + "\nTotal Tests: " + totalTests + "\nTotal Passed:  " + totalPasses + " ",
                actions: [
                    {
                        type: "button",
                        text: "Test Report",
                        url: "" + reportHTMLUrl,
                        style: "primary"
                    },
                    {
                        type: "button",
                        text: "CircleCI Logs",
                        url: "" + CI_BUILD_URL,
                        style: "primary"
                    }
                ]
            });
        }
        case "error": {
            return (attachments = {
                color: "#ff0000",
                fallback: "Build Log available at " + CI_BUILD_URL,
                text: "Branch: " + CI_BRANCH + "\nTotal Passed:  " + totalPasses + " ",
                actions: [
                    {
                        type: "button",
                        text: "CircleCI Logs",
                        url: "" + CI_BUILD_URL,
                        style: "danger"
                    }
                ]
            });
        }
        default: {
            break;
        }
    }
    return attachmentsReports;
}
exports.attachmentReports = attachmentReports;
function attachementsVideoAndScreenshots(attachmentsVideosScreenshots, 
// tslint:disable-next-line: no-shadowed-variable
status) {
    switch (status) {
        case "passed": {
            return (attachments = {
                text: "" + videoAttachmentsSlack + screenshotAttachmentsSlack,
                color: "#36a64f"
            });
        }
        case "failed": {
            return (attachments = {
                text: "" + videoAttachmentsSlack + screenshotAttachmentsSlack,
                color: "#ff0000"
            });
        }
        default: {
            break;
        }
    }
    return attachmentsVideosScreenshots;
}
exports.attachementsVideoAndScreenshots = attachementsVideoAndScreenshots;
function getFiles(dir, ext, fileList) {
    if (!fs.existsSync(dir) && path.basename(dir) === "mochareports") {
        fs.mkdirSync(dir);
        return fileList;
    }
    else if (!fs.existsSync(dir)) {
        return fileList;
    }
    else {
        var files = fs.readdirSync(dir);
        files.forEach(function (file) {
            var filePath = dir + "/" + file;
            if (fs.statSync(filePath).isDirectory()) {
                getFiles(filePath, ext, fileList);
            }
            else if (path.extname(file) === ext) {
                fileList.push(filePath);
            }
        });
        return fileList;
    }
}
exports.getFiles = getFiles;
// tslint:disable-next-line: no-shadowed-variable
function getHTMLReportFilename(reportDir) {
    var reportHTMLFullPath = getFiles(reportDir, ".html", []);
    if (reportHTMLFullPath.length === 0) {
        throw new Error("Cannot find test report @ " + reportDir);
    }
    else if (reportHTMLFullPath.length >= 2) {
        throw new Error("Multiple reports found, please provide only a single report");
    }
    else {
        reportHTMLFilename = reportHTMLFullPath
            .toString()
            .split("/")
            .pop();
        return reportHTMLFilename;
    }
}
exports.getHTMLReportFilename = getHTMLReportFilename;
// tslint:disable-next-line: no-shadowed-variable
function getTestReportStatus(reportDir) {
    var reportFile = getFiles(reportDir, ".json", []);
    if (reportFile.length === 0) {
        throw new Error("Cannot find json test report @ " + reportDir);
    }
    else if (reportFile.length >= 2) {
        throw new Error("Multiple json reports found, please run mochawesome-merge to provide a single report");
    }
    else {
        var rawdata = fs.readFileSync(reportFile[0]);
        var parsedData = JSON.parse(rawdata.toString());
        var reportStats = parsedData.stats;
        totalSuites = reportStats.suites;
        totalTests = reportStats.tests;
        totalPasses = reportStats.passes;
        totalFailures = reportStats.failures;
        totalDuration = reportStats.duration;
        if (totalTests === undefined || totalTests === 0) {
            status = "error";
        }
        else if (totalFailures > 0 || totalPasses === 0) {
            status = "failed";
        }
        else if (totalFailures === 0) {
            status = "passed";
        }
        return {
            totalSuites: totalSuites,
            totalTests: totalTests,
            totalPasses: totalPasses,
            totalFailures: totalFailures,
            totalDuration: totalDuration,
            reportFile: reportFile,
            status: status
        };
    }
}
exports.getTestReportStatus = getTestReportStatus;
// tslint:disable-next-line: no-shadowed-variable
function prChecker(CI_PULL_REQUEST) {
    if (CI_PULL_REQUEST && CI_PULL_REQUEST.indexOf("pull") > -1) {
        return (prLink = "<" + CI_PULL_REQUEST + "| - PR >");
    }
}
exports.prChecker = prChecker;
// tslint:disable-next-line: no-shadowed-variable
function getVideoLinks(artefactUrl, videosDir) {
    if (!artefactUrl) {
        throw new Error("artefactUrl env var does not exist");
    }
    else {
        var videosURL_1 = "" + artefactUrl;
        var videos = getFiles(videosDir, ".mp4", []);
        if (videos.length === 0) {
            return;
        }
        else {
            videos.forEach(function (videoObject) {
                var trimmedVideoFilename = path.basename(videoObject);
                videoAttachmentsSlack = "<" + videosURL_1 + videoObject + "|Video:- " + trimmedVideoFilename + ">\n" + videoAttachmentsSlack;
            });
        }
    }
    return videoAttachmentsSlack;
}
exports.getVideoLinks = getVideoLinks;
// tslint:disable-next-line: no-shadowed-variable
function getScreenshotLinks(artefactUrl, screenshotDir) {
    if (!artefactUrl) {
        throw new Error("artefactUrl env var does not exist");
    }
    else {
        var screenshotURL_1 = "" + artefactUrl;
        var screenshots = getFiles(screenshotDir, ".png", []);
        if (screenshots.length === 0) {
            return;
        }
        else {
            screenshots.forEach(function (screenshotObject) {
                var trimmedScreenshotFilename = path.basename(screenshotObject);
                screenshotAttachmentsSlack = "<" + screenshotURL_1 + screenshotObject + "|Screenshot:- " + trimmedScreenshotFilename + ">\n" + screenshotAttachmentsSlack;
            });
        }
    }
    return screenshotAttachmentsSlack;
}
exports.getScreenshotLinks = getScreenshotLinks;
// tslint:disable-next-line: no-shadowed-variable
function buildHTMLReportURL(reportDir, logger) {
    artefactUrl = CI_URL + "/" + VCS_ROOT + "/" + CI_PROJECT_USERNAME + "/" + CI_PROJECT_REPONAME + "/" + CI_BUILD_NUM + "/artifacts/0";
    reportHTMLFilename = getHTMLReportFilename(reportDir);
    if (logger) {
        // tslint:disable-next-line: no-console
        console.log("reportDir", reportDir);
        // tslint:disable-next-line: no-console
        console.log("reportHTMLFilename", reportHTMLFilename);
        // tslint:disable-next-line: no-console
        console.log("artefactUrl", artefactUrl);
    }
    reportHTMLUrl = artefactUrl + reportDir + "/" + reportHTMLFilename;
    return reportHTMLUrl + artefactUrl;
}
exports.buildHTMLReportURL = buildHTMLReportURL;
// tslint:disable-next-line: no-shadowed-variable
function getCommitUrl(VCS_ROOT) {
    if (VCS_ROOT === "github") {
        VCS_BASEURL = "https://github.com";
        return (COMMIT_URL = VCS_BASEURL + "/" + CI_PROJECT_USERNAME + "/" + CI_PROJECT_REPONAME + "/commit/" + CI_SHA1);
    }
    else if (VCS_ROOT === "bitbucket") {
        VCS_BASEURL = "https://bitbucket.org";
        return (COMMIT_URL = VCS_BASEURL + "/" + CI_PROJECT_USERNAME + "/" + CI_PROJECT_REPONAME + "/commits/" + CI_SHA1);
    }
}
